# convert images of pride flags into NES-compatible format

# NES graphics glossary:
# - tile = 8*8 pixels, 2 bits/pixel
# - attribute block = 2*2 tiles
# - (sub)palette = 4 colors
# - palette(s) = 8 subpalettes (4 for background, 4 for sprites)
# - PT = pattern table (16 bytes/tile; what the tiles look like)
# - NT = name table (1 byte/tile; 32*30 tiles; which tile at each screen
#        position)
# - AT = attribute table (2 bits per attribute block; 16*16 attribute blocks
#        but bottom row unused; which subpalette for each attribute block)

import os, re, sys
from collections import Counter
from itertools import chain
from PIL import Image  # Pillow, https://python-pillow.org

IMAGE_DIR  = "img"           # read images from this path
IMAGE_EXT  = ".png"          # read images with this extension
TITLE_FILE = "title_screen"  # sort this image first (no extension)
ASM_FILE   = "imgdata.asm"   # write all data except PTs in ASM6 format here
PT_FILE    = "chr-bg.bin"    # write PT data here

# maximum number of tiles in PT0/PT1
PT_MAX_TILES = (256, 208)
# images that use PT1 instead of PT0
PT1_IMAGES = frozenset(("title_screen",))

# optional manually-defined palettes by filename;
# up to 4 tuples with up to 3 NES colors each (order matters);
# must have exactly the same colors as the image, minus NES_BG_COLOR;
# these reduce the number of unique tiles a little
MANUAL_SUBPALS = {
    # 7 colors (+ black)
    "title_screen": (
        (0x21, 0x30, 0x13),  # cyan, white, purple
        (0x30, 0x15),        # white, red
        (0x30, 0x27),        # white, yellow
        (0x30, 0x19, 0x12)   # white, green, blue
    ),
    # 7 colors
    "autism": (
        (0x37, 0x14, 0x25),  # yellow, purple, red
        (0x37, 0x21, 0x2c),  # yellow, blue, cyan
        (0x37, 0x27, 0x29),  # yellow, orange, green
        (0x21, 0x27)         # blue, orange
    ),
    # 6 colors; getting yellow and white wrong would waste many tiles
    "autism_hstripes": (
        (0x28, 0x26, 0x16),  # yellow, light red, dark red
        (0x28, 0x30),        # yellow, white
        (0x28, 0x2a, 0x1a),  # yellow, light green, dark green
    ),
    # 4 colors; saves ~14 tiles
    "autism_vstripes": (
        (0x16, 0x30),        # red, white
        (0x1a, 0x30),        # green, white
        (0x12, 0x30),        # blue, white
        (0x16, 0x1a, 0x12),  # red, green, blue
    ),
    # 6 colors (+ black); saves ~3 tiles
    "bear": (
        (0x17, 0x27, 0x37),  # darkish brown, lightish brown, light brown
        (0x00, 0x30, 0x37),  # gray, white, light brown
        (0x07, 0x17),        # dark brown, darkish brown
    ),
    # 6 colors (+ black); saves ~2 tiles
    "furry": (
        (0x16, 0x27),        # red-orange
        (0x27, 0x28),        # orange-yellow
        (0x11, 0x1b, 0x28),  # blue-green-yellow
        (0x04, 0x11),        # purple-blue
    ),
    # 2 colors; getting these wrong would waste many tiles
    "inter-_sex": (
        (0x28, 0x04),        # yellow, purple
    ),
    # 10 colors (+ black); same as autogenerated palette but with yellow &
    # purple swapped
    "rainbow_progress_intersex": (
        (0x28, 0x04, 0x30),  # yellow, purple, white
        (0x08, 0x21, 0x25),  # brown, cyan, pink
        (0x12, 0x25, 0x30),  # blue, pink, white
        (0x16, 0x19, 0x27),  # red, green, orange
    ),
    # 4 colors; saves ~3 tiles
    "sapphic": (
        (0x25,),             # pink
        (0x30, 0x13, 0x27),  # white, purple, yellow
    ),
}
assert all(len(p) <= 4 for p in MANUAL_SUBPALS.values())
assert all(all(len(v) <= 3 for v in p) for p in MANUAL_SUBPALS.values())

# Note: changing these requires changing the NES program as well.
# NES color for background and unused colors; also the border color (top &
# bottom of NT), which is why supporting other BG colors is not useful at all
NES_BG_COLOR = 0x0f  # black
# image height in AT blocks
VERT_AT_BLKS = 12
# number of RLE-compressed NT/AT RLE data slices
RLE_SLICE_COUNT = 6
# uncompressed size of each NT/AT RLE data slice; last one may be smaller
RLE_SLICE_SIZE = 140

# NT data size + AT data size <= storage capacity
assert VERT_AT_BLKS * 2 * 32 + 8 * 8 <= RLE_SLICE_COUNT * RLE_SLICE_SIZE

# NES master palette
# key=index, value=(red, green, blue); source: FCEUX (fceux.pal)
# colors omitted (hexadecimal): 0d-0e, 1d-20, 2d-2f, 3d-3f
NES_PALETTE = {
    0x00: (0x74, 0x74, 0x74),
    0x01: (0x24, 0x18, 0x8c),
    0x02: (0x00, 0x00, 0xa8),
    0x03: (0x44, 0x00, 0x9c),
    0x04: (0x8c, 0x00, 0x74),
    0x05: (0xa8, 0x00, 0x10),
    0x06: (0xa4, 0x00, 0x00),
    0x07: (0x7c, 0x08, 0x00),
    0x08: (0x40, 0x2c, 0x00),
    0x09: (0x00, 0x44, 0x00),
    0x0a: (0x00, 0x50, 0x00),
    0x0b: (0x00, 0x3c, 0x14),
    0x0c: (0x18, 0x3c, 0x5c),
    0x0f: (0x00, 0x00, 0x00),
    0x10: (0xbc, 0xbc, 0xbc),
    0x11: (0x00, 0x70, 0xec),
    0x12: (0x20, 0x38, 0xec),
    0x13: (0x80, 0x00, 0xf0),
    0x14: (0xbc, 0x00, 0xbc),
    0x15: (0xe4, 0x00, 0x58),
    0x16: (0xd8, 0x28, 0x00),
    0x17: (0xc8, 0x4c, 0x0c),
    0x18: (0x88, 0x70, 0x00),
    0x19: (0x00, 0x94, 0x00),
    0x1a: (0x00, 0xa8, 0x00),
    0x1b: (0x00, 0x90, 0x38),
    0x1c: (0x00, 0x80, 0x88),
    0x21: (0x3c, 0xbc, 0xfc),
    0x22: (0x5c, 0x94, 0xfc),
    0x23: (0xcc, 0x88, 0xfc),
    0x24: (0xf4, 0x78, 0xfc),
    0x25: (0xfc, 0x74, 0xb4),
    0x26: (0xfc, 0x74, 0x60),
    0x27: (0xfc, 0x98, 0x38),
    0x28: (0xf0, 0xbc, 0x3c),
    0x29: (0x80, 0xd0, 0x10),
    0x2a: (0x4c, 0xdc, 0x48),
    0x2b: (0x58, 0xf8, 0x98),
    0x2c: (0x00, 0xe8, 0xd8),
    0x30: (0xfc, 0xfc, 0xfc),
    0x31: (0xa8, 0xe4, 0xfc),
    0x32: (0xc4, 0xd4, 0xfc),
    0x33: (0xd4, 0xc8, 0xfc),
    0x34: (0xfc, 0xc4, 0xfc),
    0x35: (0xfc, 0xc4, 0xd8),
    0x36: (0xfc, 0xbc, 0xb0),
    0x37: (0xfc, 0xd8, 0xa8),
    0x38: (0xfc, 0xe4, 0xa0),
    0x39: (0xe0, 0xfc, 0xa0),
    0x3a: (0xa8, 0xf0, 0xbc),
    0x3b: (0xb0, 0xfc, 0xcc),
    0x3c: (0x9c, 0xfc, 0xf0),
}

# -----------------------------------------------------------------------------

def get_filenames():
    # generate PNG filenames without extensions
    with os.scandir(IMAGE_DIR) as dirIter:
        for entry in dirIter:
            (filename, extension) = os.path.splitext(entry.name)
            if entry.is_file() and extension == IMAGE_EXT:
                yield filename

def filename_to_path(filename):
    return os.path.join(IMAGE_DIR, filename) + IMAGE_EXT

def color_diff(rgb1, rgb2):
    # get difference (0-768) of two colors (red, green, blue)
    return sum(abs(comp[0] - comp[1]) for comp in zip(rgb1, rgb2))

def closest_nes_color(rgb):
    # get best match (NES color index) for color (red, green, blue)
    minDiff = 9999
    for nesColor in sorted(NES_PALETTE):
        diff = color_diff(NES_PALETTE[nesColor], rgb)
        if diff < minDiff:
            minDiff = diff
            bestNesColor = nesColor
    return bestNesColor

def get_color_conv_table(image):
    # return: {pngIndex: nesColorIndex, ...}

    # color indexes actually used in image data
    indexesUsed = [i for (cnt, i) in image.getcolors() if cnt > 0]
    # palette as [R, G, B, ...]; may contain unused colors
    palette = image.getpalette()
    # {pngIndex: nesColorIndex, ...} for used colors
    return dict(
        (i, closest_nes_color(palette[i*3:(i+1)*3])) for i in indexesUsed
    )

def validate_image(image):
    if image.width != 256:
        sys.exit("Image width must be 256.")
    if image.height != VERT_AT_BLKS * 16:
        sys.exit(f"Image height must be {VERT_AT_BLKS*16}.")
    if image.mode != "P":
        sys.exit("Image must have a palette.")

    nesColors = get_color_conv_table(image).values()
    if len(set(nesColors) - {NES_BG_COLOR}) > 12:
        sys.exit(
            f"Can't have more than 12 unique colors plus ${NES_BG_COLOR:02x}."
        )
    if len(set(nesColors)) < len(nesColors):
        sys.exit(
            "More than one image color corresponds to the same NES color."
        )

def get_nes_pixels(image):
    # return image pixels as NES color indexes
    pngToNes = get_color_conv_table(image)  # {pngIndex: nesColorIndex, ...}
    return tuple(pngToNes[i] for i in image.getdata())

def get_color_sets(nesPixels):
    # for each attribute block, generate set of NES color indexes
    # nesPixels: image pixels as NES color indexes

    colors = set()
    for ay in range(0, VERT_AT_BLKS * 16, 16):
        for ax in range(0, 16 * 16, 16):
            colors.clear()
            for py in range(16):
                si = (ay + py) * 256 + ax  # source index
                colors.update(nesPixels[si:si+16])
            yield frozenset(colors)

def get_sorted_color_sets(nesPixels):
    # get color sets, clean up and sort
    # nesPixels: image pixels as NES color indexes

    # get unique sets of color indexes in attribute blocks
    colorSets = {
        frozenset(s - {NES_BG_COLOR}) for s in get_color_sets(nesPixels)
    }
    if max(len(s) for s in colorSets) > 3:
        sys.exit(
            f"Can only have 3 unique colors plus ${NES_BG_COLOR:02x} per "
            "attribute block."
        )

    # delete sets that are a subset of another set
    colorSets = {
        s1 for s1 in colorSets
        if not any(s1.issubset(s2) and s1 != s2 for s2 in colorSets)
    }

    # sort sets by number of colors (important) and by colors they contain
    # (for determinism)
    colorSets = sorted(colorSets, key=lambda s: sorted(s))
    return sorted(colorSets, key=lambda s: len(s), reverse=True)

def create_subpalettes(nesPixels):
    # return a list of 4 subpalettes (sets) with up to 3 color indexes each
    # nesPixels: image pixels as NES color indexes
    # printExtraInfo: print intermediate results (bool)

    colorSets = get_sorted_color_sets(nesPixels)

    subpals = [set() for i in range(4)]
    for colorSet in colorSets:
        # get maximum number of common colors with a subpalette in which
        # the new colors fit
        try:
            maxCnt = max(
                len(s & colorSet) for s in subpals
                if len(s | colorSet) <= 3
            )
        except ValueError:
            sys.exit(
                f"Couldn't arrange colors into 4 subpalettes with 3 unique "
                f"colors plus ${NES_BG_COLOR:02x} each."
            )
        # which subpalette was it (first one if several)
        bestSubpal = [
            i for (i, s) in enumerate(subpals)
            if len(s & colorSet) == maxCnt and len(s | colorSet) <= 3
        ][0]
        # add colors there
        subpals[bestSubpal].update(colorSet)

    return subpals

def get_palette(nesPixels, filename, extraInfo=False):
    # return palette for image as a tuple of 4 tuples of NES color indexes
    # nesPixels: image pixels as NES color indexes
    # extraInfo: print extra info

    if extraInfo:
        print(f"{'':8}Colors:       " + ", ".join(
            format(c, "02x") for c in sorted(set(nesPixels) - {NES_BG_COLOR})
        ))
        colorSets = get_sorted_color_sets(nesPixels)
        print(f"{'':8}Color sets:   " + ", ".join(
            "+".join(f"{c:02x}" for c in sorted(s)) for s in colorSets
        ))

    # get subpalettes
    if filename in MANUAL_SUBPALS:
        # manually-defined
        if extraInfo:
            print(f"{'':8}Palette type: manual")
        subpals = MANUAL_SUBPALS[filename]
        definedColors = set(chain.from_iterable(subpals))
        actualColors = set(nesPixels) - {NES_BG_COLOR}
        if actualColors - definedColors:
            sys.exit("Manual subpalette definition lacks colors.")
        if definedColors - actualColors:
            sys.exit("Manual subpalette definition has extra colors.")
        # pad number of subpalettes to 4
        subpals = list(subpals) + (4 - len(subpals)) * [()]
        # restore background colors and pad each subpalette
        subpals = tuple(
            tuple([NES_BG_COLOR] + list(sp) + (3 - len(sp)) * [NES_BG_COLOR])
            for sp in subpals
        )
    else:
        # get automatically
        if extraInfo:
            print(f"{'':8}Palette type: automatic")
        subpals = create_subpalettes(nesPixels)
        # order subpalettes, restore background color and pad each subpalette
        subpals = tuple(
            tuple([NES_BG_COLOR] + sorted(sp) + (3 - len(sp)) * [NES_BG_COLOR])
            for sp in subpals
        )

    return subpals

def get_subpal_index(colorSet, subpals):
    # Return subpalette index (int 0-3) for one attribute block.
    # Prefer subpalettes where the needed colors are at low indexes.
    # colorSet: unique NES color indexes in attribute block (including
    #           background color)
    # subpals: list of 4 lists of 4 NES colors

    lowestScore = 999999

    for (si, subpal) in enumerate(subpals):
        try:
            score = sum(2 ** subpal.index(c) for c in colorSet)
        except ValueError:
            score = 999999
        if score < lowestScore:
            lowestScore = score
            bestSubpal = si

    return bestSubpal

def get_tiles(nesPixels):
    # generate each tile as NES color indexes (a tuple of 64 ints)
    # nesPixels: image pixels as NES color indexes

    pixels = []

    for ay in range(0, VERT_AT_BLKS * 16, 8):
        for ax in range(0, 16 * 16, 8):
            pixels.clear()
            for py in range(8):
                srcInd = (ay + py) * 256 + ax
                pixels.extend(nesPixels[srcInd:srcInd+8])
            yield tuple(pixels)

def convert_tiles(nesPixels, atData, subpals):
    # generate tiles as tuples of 64 2-bit ints
    # nesPixels: image pixels as NES color indexes
    # subpals: a tuple of 4 tuples of 4 NES color indexes

    for (i, tile) in enumerate(get_tiles(nesPixels)):
        # get subpalette for this tile (bits: YYYYyXXXXx -> YYYYXXXX)
        subpal = atData[(i >> 2) & 0b1111_0000 | (i >> 1) & 0b1111]
        # convert NES color index to subpalette index
        yield tuple(subpals[subpal].index(i) for i in tile)

def get_sorted_tiles(filenames, maxTiles):
    # return a list of unique tiles in all images in this PT
    # (each tile is a tuple of 64 2-bit ints)
    # filenames: filenames in this PT
    # maxTiles: maximum number of unique tiles in this PT

    # make sure we have a blank tile for visible unused area
    allUniqueTiles = {tuple(64 * [0])}

    for filename in filenames:
        # get pixels as NES color indexes
        with open(filename_to_path(filename), "rb") as handle:
            handle.seek(0)
            nesPixels = get_nes_pixels(Image.open(handle))

        # get unique tiles
        subpals = get_palette(nesPixels, filename)  # 4*4 NES color indexes
        atData = [
            get_subpal_index(s, subpals) for s in get_color_sets(nesPixels)
        ]
        uniqueTiles = set(convert_tiles(nesPixels, atData, subpals))
        del subpals
        del atData

        if any(any(t.count(c) == 1 for c in range(4)) for t in uniqueTiles):
            print(
                f"Warning: {filename} has a tile with only one pixel of "
                "some color; consider optimizing.", file=sys.stderr
            )
        oldCnt = len(allUniqueTiles)
        allUniqueTiles.update(uniqueTiles)
        print(
            f"{'':4}{filename:26}: "
            f"{len(uniqueTiles):3} "
            f"{len(allUniqueTiles)-oldCnt:3} "
            f"{len(allUniqueTiles):3}"
        )
        if len(allUniqueTiles) > maxTiles:
            sys.exit(f"Error: more than {maxTiles} unique tiles total.")

    # sort by pixels, by unique colors and by number of unique colors
    allUniqueTiles = sorted(allUniqueTiles)
    allUniqueTiles.sort(key=lambda t: sorted(set(t)))
    return sorted(allUniqueTiles, key=lambda t: len(set(t)))

def encode_pt_data(tiles):
    # return PT data for all images as bytes; each tile is 64 ints

    ptData = bytearray()
    for tile in tiles:
        for bp in range(2):  # bitplane
            for py in range(8):  # pixel Y
                ptData.append(sum(
                    ((tile[py*8+i] >> bp) & 1) << (7 - i) for i in range(8)
                ))

    # pad to a multiple of 16 tiles (256 bytes)
    paddingLength = (256 - len(ptData) % 256) % 256
    ptData.extend(paddingLength * b"\xff")
    return ptData

def write_asm_preamble(filenames, handle):
    # write ASM6-compatible assembly code for table of contents etc.
    # handle: destination file handle

    print(
        "; Image data excluding pattern tables. Generated by convert.py.",
        file=handle
    )
    print("", file=handle)

    print("image_count equ " + str(len(filenames)), file=handle)
    print("", file=handle)

    # PT to use (least significant bit first)
    ptBytes = bytes(
        sum(
            1 << i for (i, f) in enumerate(filenames[firstIndex:firstIndex+8])
            if f in PT1_IMAGES
        )
        for firstIndex in range(0, len(filenames), 8)
    )
    print("pts_to_use", file=handle)
    print("\tdb " + ", ".join(f"%{b:08b}" for b in ptBytes), file=handle)
    print("", file=handle)

    print("image_ptrs", file=handle)
    ptrs = [f"img{i}_ptrs" for i in range(len(filenames))]
    for i in range(0, len(ptrs), 5):
        print("\tdw " + ", ".join(ptrs[i:i+5]), file=handle)
    print("", file=handle)

    for fi in range(len(filenames)):
        print(f"img{fi}_ptrs", file=handle)
        ptrs = [f"img{fi}_nt_at{si}" for si in range(RLE_SLICE_COUNT)] \
        + [f"img{fi}_pal", f"img{fi}_txt"]
        print("\tdw " + ", ".join(ptrs[:4]), file=handle)
        print("\tdw " + ", ".join(ptrs[4:]), file=handle)
    print("", file=handle)

def encode_at_data(atData):
    # pad AT data and generate it as 64 bytes (ints)
    # atData: VERT_AT_BLKS*16 2-bit ints

    # pad to 16 rows (last one unused by the NES)
    atData = (15 - VERT_AT_BLKS) * 16 * [0] + atData + 16 * [0]

    atBytes = bytearray()
    for y in range(8):
        for x in range(8):
            si = (y * 16 + x) * 2  # source index
            yield (
                atData[si]
                | (atData[si+ 1] << 2)
                | (atData[si+16] << 4)
                | (atData[si+17] << 6)
            )

def rle_encode_raw(data):
    # generate runs: (length, byte); length = 1-127

    start = -1  # start position of current run
    prev = -1   # previous byte

    for (i, byte) in enumerate(data):
        if start == -1:
            # start first run
            start = i
        elif prev != byte or i - start == 127:
            # restart run
            yield (i - start, prev)
            start = i
        prev = byte
    if start > -1:
        # end last run
        yield (len(data) - start, prev)

def rle_encode(data):
    # generate bytes: direct_byte, run, run, ..., 0
    # 1st byte of data is the direct (implied) byte; other bytes are runs of
    # 1-2 bytes:
    #     0x00     : terminator (end of data)
    #     0x80     : (unused)
    #     0x01-0x7f: output direct_byte    1-127 times
    #     0x81-0xff: output following byte 1-127 times

    rawRleData = tuple(rle_encode_raw(data))

    # direct byte (the most common byte that begins a run)
    directByte = Counter(r[1] for r in rawRleData).most_common(1)[0][0]
    yield directByte

    # RLE data itself
    for (length, byte) in rawRleData:
        if byte == directByte:
            yield length
        else:
            yield 0x80 | length
            yield byte

    # terminator
    yield 0x00

def generate_rle_slices(nesPixels, subpals, uniqueTiles):
    # generate RLE-compressed NT/AT data in slices

    atData = [get_subpal_index(s, subpals) for s in get_color_sets(nesPixels)]
    ntAtData = bytes(
        uniqueTiles.index(tile) for tile in
        convert_tiles(nesPixels, atData, subpals)
    ) + bytes(encode_at_data(atData))

    for si in range(RLE_SLICE_COUNT):
        yield bytes(rle_encode(
            ntAtData[si*RLE_SLICE_SIZE:(si+1)*RLE_SLICE_SIZE]
        ))

def rle_slice_to_chunks(rleSlice):
    # generate RLE slice (bytes) as chunks (1 or 2 bytes each) for
    # human-readability
    i = 0
    while True:
        chunkLen = 2 if i > 0 and rleSlice[i] & 0x80 else 1
        yield rleSlice[i:i+chunkLen]
        if i > 0 and rleSlice[i] == 0x00:
            break  # terminator
        i += chunkLen

def filename_to_descr(filename):
    # format a string (filename without extension) into three eight-character
    # lines aligned right & bottom; replace "_" with newline; examples:
    #     "X"   -> 23 spaces + "x"
    #     "X_Y" -> 15 spaces + "x" + 7 spaces + "y"

    if re.search("^[0-9a-z_-]+$", filename) is None:
        sys.exit(
            "Only 0-9, a-z, _, - allowed in filenames (excluding extension)."
        )

    lines = filename.split("_")
    if len(lines) > 3:
        sys.exit("No more than 2 underscores allowed in filenames.")
    if max(len(l) for l in lines) > 8:
        sys.exit(
            "No more than 8 consecutive non-underscore characters allowed "
            "in filenames (excluding extension)."
        )

    lines = (3 - len(lines)) * [""] + lines
    return "".join(l.rjust(8) for l in lines)

def char_to_tile_index(char):
    # convert character into NES tile index
    cp = ord(char)
    if cp == ord(" "):
        return 0x00
    if cp == ord("-"):
        return 0xd0
    if ord("0") <= cp <= ord("9"):
        return 0xd1 + cp - ord("0")
    if ord("a") <= cp <= ord("z"):
        return 0xdb + cp - ord("a")
    sys.exit("Unknown character.")

def write_asm_for_image(fileIndex, filename, uniqueTiles, dstHnd):
    # write ASM6-compatible assembly code for one image, return RLE data size
    # fileIndex: filename index
    # uniqueTiles: unique tiles in correct PT
    # dstHnd: destination file handle

    print(f"\t; {filename}", file=dstHnd)

    # get pixels as NES color indexes
    with open(filename_to_path(filename), "rb") as srcHnd:
        srcHnd.seek(0)
        nesPixels = get_nes_pixels(Image.open(srcHnd))

    subpals = get_palette(nesPixels, filename)  # 4*4 NES color indexes

    # RLE-compressed NT/AT data in slices
    rleDataSize = 0
    for (si, rleSlice) in enumerate(generate_rle_slices(
        nesPixels, subpals, uniqueTiles
    )):
        rleDataSize += len(rleSlice)
        rleChunks = tuple(rle_slice_to_chunks(rleSlice))
        print(f"img{fileIndex}_nt_at{si}", file=dstHnd)
        for i in range(0, len(rleChunks), 13):
            print(
                "\thex " + " ".join(c.hex() for c in rleChunks[i:i+13]),
                file=dstHnd
            )

    # palette
    palette = bytes(chain.from_iterable(subpals))
    palette = " ".join(
        palette[i:i+4].hex() for i in range(0, len(palette), 4)
    )
    print(f"img{fileIndex}_pal", file=dstHnd)
    print(f"\thex {palette}", file=dstHnd)

    # description
    descr = filename_to_descr(filename).lstrip(" ")
    descr = bytes(char_to_tile_index(c) for c in descr)
    print(f"img{fileIndex}_txt", file=dstHnd)
    print(f"\tdb {len(descr)}", file=dstHnd)
    for i in range(0, len(descr), 22):
        print(
            f"\thex " + " ".join(f"{b:02x}" for b in descr[i:i+22]),
            file=dstHnd
        )
    print("", file=dstHnd)

    return rleDataSize

def main():
    # get filenames
    filenames = list(get_filenames())
    if not 1 <= len(filenames) <= 255:
        sys.exit("Must have 1-255 images.")
    if TITLE_FILE not in filenames:
        sys.exit(f"Title screen image {TITLE_FILE+IMAGE_EXT} not found.")
    if PT1_IMAGES - set(filenames):
        sys.exit("Some files assigned for PT1 not found.")
    if set(MANUAL_SUBPALS) - set(filenames):
        sys.exit(
            "Manual subpalette definitions contain nonexistent filenames."
        )

    print("Images:", len(filenames))
    print()

    # sort filenames without punctuation, title screen first
    filenames.sort()
    filenames.sort(key=lambda f: f.replace("_", "").replace("-", ""))
    filenames = tuple(sorted(filenames, key=lambda f: f != TITLE_FILE))

    print("Palette test...")
    print(
        "'Colors': hexadecimal NES colors excluding background color "
        f"${NES_BG_COLOR:02x}."
    )
    print(
        "'Color sets': sets of hexadecimal NES colors used in AT blocks "
        "excluding background color; subsets of other sets excluded."
    )
    print(
        "'Palette type': manual = predefined, automatic = automatically "
        "generated."
    )
    print("'Palette': 4*4 hexadecimal NES colors including background color.")
    for filename in filenames:
        print(f"{'':4}{filename}:")

        # validate image, get pixels as NES color indexes
        with open(filename_to_path(filename), "rb") as handle:
            handle.seek(0)
            image = Image.open(handle)
            validate_image(image)
            nesPixels = get_nes_pixels(image)

        palette = bytes(chain.from_iterable(
            get_palette(nesPixels, filename, True)
        ))
        palette = ", ".join(
            "+".join(f"{b:02x}" for b in palette[i:i+4])
            for i in range(0, len(palette), 4)
        )
        print(f"{'':8}Palette:      {palette}")
    print()

    print(f"Writing background PT data to {PT_FILE}...")
    print("Unique/new unique/total unique tile count after each file.")
    uniqueTilesByPt = []
    with open(PT_FILE, "wb") as handle:
        handle.seek(0)
        for pt in range(2):
            print(f"PT{pt}...")
            ptFilenames = [f for f in filenames if int(f in PT1_IMAGES) == pt]
            uniqueTilesByPt.append(get_sorted_tiles(
                ptFilenames, PT_MAX_TILES[pt]
            ))
            handle.write(encode_pt_data(uniqueTilesByPt[pt]))
            # pad
            expectedSize = sum(PT_MAX_TILES[:pt+1]) * 16
            handle.write((expectedSize - handle.tell()) * b"\xff")
        size = handle.tell()
    print(f"Wrote {size} bytes.")
    print(
        "Free tiles in PT0/PT1:", "/".join(
            str(PT_MAX_TILES[p] - len(uniqueTilesByPt[p])) for p in range(2)
        )
    )
    print(
        "Identical tiles in PT0 and PT1:",
        len(set(uniqueTilesByPt[0]) & set(uniqueTilesByPt[1]))
    )
    print()

    print(f"Writing NT/AT/PT number/palette/description data to {ASM_FILE}...")
    print("Compressed NT/AT data size after each file.")
    totalRleDataSize = 0
    with open(ASM_FILE, "wt", encoding="ascii") as dstHnd:
        dstHnd.seek(0)
        write_asm_preamble(filenames, dstHnd)
        for (fi, filename) in enumerate(filenames):
            rleDataSize = write_asm_for_image(
                fi, filename, uniqueTilesByPt[filename in PT1_IMAGES], dstHnd
            )
            totalRleDataSize += rleDataSize
            print(f"{'':4}{filename:26}: {rleDataSize:3}")

    print("Total compressed NT/AT data size:", totalRleDataSize)
    print()

main()
